<<JSP - Java Server Page>>
- 클라이언트의 요청에 대해서 동적 컨텐츠(사용자마다 다 다른결과)를 생성해서 응답결과를 만들어줄 때 사용하는 기술로 html문서에 화면을 구성하는
    방법과 동일하게 작성하면 된다.
- 실행이 될때 WAS내부에 있는 JSP컨테이너에 의해 서블릿으로 변환되어 실행이 되므로 자바코드를 사용할 수 있다.
- JSP는 서블릿에서 발생한 데이터를 화면에 출력하기 위해서 사용하는 기술이므로 자바코드를 다양하게 많이 정의하지
    않도록 구현해야한다.
- Lifecycle이 서블릿과 유사하다.

1. JSP스크립트요소(scriptTest.jsp)
	1) 스크립트릿 (지양함)
		<%    %> 사이에 자바코드를 입력하기.
		=> 문장의 끝에 반드시 ;을 추가한다.
		=> 스크립트릿 요소는 여러 번 반복해서 정의할 수 있다.
		=> 서블릿이 공유하는 데이터를 꺼내서 출력하는 작업만 해야한다.
		=> .java파일에서 할 수 있는 모든 작업을 할 수 있다.(메소드선언, 클래스선언은 제외)
		=> java.lang패키지 빼고 모두 import 해야함.
		=> 스크립트릿 내부에서 정의하는 변수는 모두 _jspService()메소드의 지역변수로 추가된다.
	2) 선언문
		<%!  %>
		=> jsp파일이 서블릿으로 변환될때 서블릿클래스의 멤버로 작성될 메소드나 변수를 정의
	
	3) 표현식
		<%=  %>
		동적으로 만들어진 컨텐츠를 구성하는 값을 출력하기 위해 사용하는 스크립트요소
		서블릿으로 변환될때 out.print()의 내부에 매개변수로 추가가 되므로 ;을 추가하지 않는다.
		
		[오류상황]
		<%= "test" ;%>  =============== out.print("test";)
		
		=> 표현식은 값을 출력하기 위해서 사용하므로 사용할 수 있는 타입이 제한적이다.
		=> 기본형, String, 앞의 나열한 타입을 반환하는 메소드 호출문, 연산
		
2. 지시자		
3. JSP내장객체
   => jsp가 서블릿으로 변환될 때 jsp컨테이너에 의해서 _jspService()메소드 내부에 추가된 지역변수
      (jsp문서 내부에서 변수 선언하지 않고 사용할 수 있다.)
            객체명은 컨테이너가 자동생성해준 이름이므로 반드시 정해진 이름으로 사용해야 한다.
      request : HttpServletRequest
      response: HttpServletResponse
      session : HttpSession
      application: ServletContext
      
      1) request객체
      	  클라이언트가 요청을 하면 이 요청정보가서블릿에 먼저 전해지고 서블릿에서 JSP로 전해짐.
                  클라이언트의 요청정보를 담고있는 객체
                  나중에 서블릿으로 부터 전달받아서 사용하게 됨.
   
   
4. JSP액션태그
5. EL & JSTL