<<요청재지정>>
클라이언트로부터 들어온 최초 요청을 servlet에서 다른 자원(예를들어 jsp)으로 요청을 넘기는 것을 요청재지정이라고 한다.
요청재지정을 하는 목적은 서블릿에서 화면단을 분리시키고 분리시킨 화면이 응답하도록 하기 위해 필요하다.
웹을 개발하기 위해 사용하는 최적화된 패턴인 MVC패턴을 적용하기 위해 반드시 필요한 개념.

1. 데이터공유
	1) scope
		page, request, session, application에 각각 map구조의 저장소를 갖고 있고 그 저장소에 추가하고 저장소에서 꺼내온다.
											   --------
											   name과 value를
											      같이 저장	
		page-> javax.servlet.jsp.PageContext => jsp문서내에서만 사용할 수 있다.
		request -> javax.servlet.ServletRequest => 한 번에 request에 대해서 처리하고 response하기 전까지 사용되는 모든 객체에서 공유
		session -> javax.servlet.http.HttpSession => 세션이 생성되고 사용되는 모든 것들이 공유할 수 있도록. 세션이 생성되는 시점: 로그인
																						  세션이 해제되는 시점: 로그아웃(또는 정해진 시간 동안 사이트를 사용하지 않은 경우)
		application -> javax.servlet.ServletContext => 모두공개: 톰캣메모리에 공유
													   => 로그인 유무와 상관없이 사용하는 모든 곳에서 공유
	2) 데이터 공유하는 메소드
	   => 공유되는 데이터를 attribute라 한다.
	   
	   	    모든 객체(scope에 해당하는)의 
	   	    setAttribute("공유할 attribute이름",공유할 객체)
	   	    								--------
	   	    								자바에서 사용할 수
	   	    								있는 모든 것 => java.lang.object (데이터 타입이 오브젝트임. 다른타입으로 캐스팅 해줘야 할 경우가 있을 것.)
	3) 공유된 데이터 가져오기
	      모든 객체(scope에 해당하는)의
	     java.lang.object = getAttribute("공유된 attribute이름")	
		
2. 요청재지정 방벙
	1) 리다이렉트(sendRedirect)
	   ① 문법
	   	  HttpServletResponse의 sendRedirect메소드를 이용해서 구현
	   	  response.sendRedirect("요청재지정될 web application의 경로")
	   	  						-------------------------------
	   	  						html, jsp, 서블릿 모두 가능
	   	  						  |
	   	  		/contextpath/폴더명.../요청application의 path
	   	  		ex)
	   	  		/serverweb/dept/list.do
	   
	   ② 실행흐름 (총 두번의 요청으로 처리됨.)
	     - 클라이언트에서 요청 -> 서블릿 실행 -> 서블릿의 실행이 모두 완료되면 클라이언트로 응답
	       -> 클라이언트가 서블릿에서 요청재지정한(sendRedirect에서 설정한) jsp파일을 다시 요청
	       -> jsp페이지가 클라이언트에 응답됨.
	   ③ 특징
	     - 두 번 이상의 요청으로 처리되므로 데이터를 공유할 수 없다.
	     - 주소표시줄이 마지막 요청 path로 변경된다.
	2) forward
	   sendRedirect와 다르게 한 번의 요청으로 모든 web application이 실행된다. 서블릿이
	      요청재지정된 application으로 모든제어를 넘기기 때문에 요청재지정된 jsp파일이 응답된다.
	   RequestDispatcher가 이런 일을 처리하는 객체
	   ① 문법
	     RequestDispatcher rd = request.getRequestDispatcher("요청재지정할 application경로")
	     rd.forward(request,response)                         -----------------------
	                -----------------                      /폴더.../application의 path
	                forward하면서 request와                                          (context의 path를 생략)--------->>>>> 생략이유: 서블릿이랑 jsp가 같은 request scope에서 실행되니까. 
	                response객체가 전달되므로                                         jsp,html,서블릿 모두 가능
	                                같은 request를 공유해서 사용할 
	                                수 있다.
	   ② 실행흐름(한 번의 요청)
	     - 클라이언트가 서블릿을 요청 -> 서블릿 실행 -> 서블릿이 클라이언트로 응답되지 않은 상태에서 jsp를
	              요청재지정(호출) -> jsp가 실행되고 실행된 결과를 클라이언트로 응답한다.
	   ③ 특징
	     - 한 번의 요청으로 모든 application이 실행되므로 데이터 공유가 가능하다.
	     - 주소표시줄이 최초 요청된 서블릿 path에서 변경되지 않는다.

	3) include
	   forward와 동일하게 RequestDispatcher의 메소드를 이용하여 실행하며 요청재지정될 때 모든 제어를
	   jsp로 넘기지 않고 다시 서블릿으로 돌아와 서블릿이 응답된다.
	   ① 문법(forward와 동일)
	     RequestDispatcher rd = request.getRequestDispatcher("요청재지정할 application path")
	     rd.include(request,response);   
	 
	   ② 실행흐름
	     - 클라이언트가 서블릿을 요청 -> 서블릿 실행 -> 서블릿이 클라이언트로 응답되지 않은 상태에서 
	       jsp를 요청재지정(호출)-> jsp실행이 완료되면 jsp실행결과를 갖고 서블릿으로 되돌아옴
	       -> 서블릿에서 최종 응답됨.
	   
	   ③ 특징
		 - forward와 동일
		 - jsp에서 주로 사용하는 요청재지정방식.

	









